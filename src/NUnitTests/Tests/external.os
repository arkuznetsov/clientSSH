// ----------------------------------------------------------
// Use of this source code is governed by an MIT-style
// license that can be found in the LICENSE file or at
// https://opensource.org/licenses/MIT.
// ----------------------------------------------------------
// Codebase: https://github.com/ArKuznetsov/clientSSH/
// ----------------------------------------------------------

// #Использовать "build"

Перем юТест;
Перем СерверАдрес;
Перем СерверПорт;
Перем ПользовательИмя;
Перем ТекущийКаталог;
Перем ПользовательПароль;
Перем ПутьККлючу;

Перем СчетчикТестов;

////////////////////////////////////////////////////////////////////
// Программный интерфейс

Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт

	юТест = ЮнитТестирование;
	
	ВсеТесты = Новый Массив;

	ВсеТесты.Добавить("ПередЗапускомТестов");

	ВсеТесты.Добавить("ТестДолжен_СоздатьЛибу");

	ВсеТесты.Добавить("ТестДолжен_ПолучитьПоток");
	ВсеТесты.Добавить("ТестДолжен_ПолучитьСоединение");

	ВсеТесты.Добавить("ТестДолжен_Подключиться");
	ВсеТесты.Добавить("ТестДолжен_ПодключитьсяСКлючом");
    ВсеТесты.Добавить("ТестДолжен_ПолучитьСодержимоеКаталога");
	ВсеТесты.Добавить("ТестДолжен_СоздатьКаталогПоПаролю");
	ВсеТесты.Добавить("ТестДолжен_СоздатьКаталогПоКлючу");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьСуществованиеКаталогаПоПаролю");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьСуществованиеКаталогаПоКлючу");
	ВсеТесты.Добавить("ТестДолжен_УдалитьКаталогПоПаролю");
	ВсеТесты.Добавить("ТестДолжен_УдалитьКаталогПоКлючу");
	ВсеТесты.Добавить("ТестДолжен_ОтправитьФайлПоПаролю");
	ВсеТесты.Добавить("ТестДолжен_ОтправитьФайлПоКлючу");
	ВсеТесты.Добавить("ТестДолжен_ПолучитьФайлПоПаролю");
	ВсеТесты.Добавить("ТестДолжен_ПолучитьФайлПоКлючу");
	ВсеТесты.Добавить("ТестДолжен_УдалитьФайлПоПаролю");
	ВсеТесты.Добавить("ТестДолжен_УдалитьФайлПоКлючу");

	Возврат ВсеТесты;

КонецФункции // ПолучитьСписокТестов()

Процедура ПередЗапускомТестов() Экспорт

	ВывестиЗаголовокТеста("Подготовка: Окружение для тестирования");

	СерверАдрес = "localhost";
	СерверПорт = 2222;
	ПользовательИмя = ПолучитьПеременнуюСреды("SSH_TEST_USER");
	ПользовательПароль = ПолучитьПеременнуюСреды("SSH_TEST_PWD");
	
	ТекущийКаталог = ПолучитьПеременнуюСреды("OSC_TEST_CWD");
	Если НЕ ЗначениеЗаполнено(ТекущийКаталог) Тогда
		ТекущийКаталог = ТекущийСценарий().Каталог;
	КонецЕсли;

	ПутьККлючу = ПолучитьПеременнуюСреды("SSH_TEST_KEY_PATH");
	Если НЕ ЗначениеЗаполнено(ПутьККлючу) Тогда
		ПутьККлючу = ОбъединитьПути(ТекущийКаталог, "tools", "openssh");
		ПутьККлючу = ОбъединитьПути(ТекущийКаталог, "files", "sftp-key");
	КонецЕсли;

	ПутьККомпоненте = ПолучитьПеременнуюСреды("OSC_TEST_LIB");
	Если НЕ ЗначениеЗаполнено(ПутьККомпоненте) Тогда
		ПутьККомпоненте = ОбъединитьПути(ТекущийКаталог, "src", "clientSSH", "bin");
		ПутьККомпоненте = ОбъединитьПути(ПутьККомпоненте, "Debug", "net48", "ClientSSH.dll");
	КонецЕсли;

	Попытка
		ПодключитьВнешнююКомпоненту(ПутьККомпоненте);
		Сообщить("Компонента подключена.");
	Исключение
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Сообщить(СтрШаблон("Ошибка подключения компоненты:%1%2", Символы.ПС, ТекстОшибки));
	КонецПопытки;

КонецПроцедуры // ПередЗапускомТестов()

Процедура ТестДолжен_СоздатьЛибу() Экспорт

	ВывестиЗаголовокТеста("Тест: Создание библиотеки подключения SSH");

	Либа = Новый КлиентSSH(СерверАдрес, СерверПорт, ПользовательИмя, ПользовательПароль);
	юТест.ПроверитьРавенство(ТипЗнч(Либа), Тип("КлиентSSH"), "Не создался экзепляр"); 

КонецПроцедуры // ТестДолжен_СоздатьЛибу()

Процедура ТестДолжен_ПолучитьПоток() Экспорт

	ВывестиЗаголовокТеста("Тест: Получение потока SSH");

	Либа = Новый КлиентSSH(СерверАдрес, СерверПорт, ПользовательИмя, ПользовательПароль);
	юТест.ПроверитьРавенство(ТипЗнч(Либа), Тип("КлиентSSH"), "Не создался экзепляр"); 
	
	Поток = Либа.ПолучитьПоток(1);
	юТест.ПроверитьРавенство(ТипЗнч(Поток), Тип("ПотокSSH"), "Не удалось получить поток"); 

	Поток.Отключиться();

КонецПроцедуры // ТестДолжен_ПолучитьПоток()

Процедура ТестДолжен_ПолучитьСоединение() Экспорт

	ВывестиЗаголовокТеста("Тест: Получение соединения SSH");

	Либа = Новый КлиентSSH(СерверАдрес, СерверПорт, ПользовательИмя, ПользовательПароль);
	юТест.ПроверитьРавенство(ТипЗнч(Либа), Тип("КлиентSSH"), "Не создался экзепляр"); 
	
	Соединение = Либа.ПолучитьСоединение();
	юТест.ПроверитьРавенство(ТипЗнч(Соединение), Тип("СоединениеSSH"), "Не удалось получить соединение"); 

КонецПроцедуры // ТестДолжен_ПолучитьСоединение()

Процедура ТестДолжен_Подключиться() Экспорт

	ВывестиЗаголовокТеста("Тест: Подключение к серверу SSH");

	Либа = Новый КлиентSSH(СерверАдрес, СерверПорт, ПользовательИмя, ПользовательПароль);
	Соединение = Либа.ПолучитьСоединение();
	
	Результат = Соединение.ВыполнитьКоманду("echo Привет");   
	
	// А = Символы.ПС; // Падает
	Результат = СтрЗаменить(Результат, Символ(10), "");
	юТест.ПроверитьРавенство(Результат, "Привет", "Нет ответа комманды");
	Результат = Соединение.ВыполнитьКоманду("echo test");
	Результат = СтрЗаменить(Результат, Символ(10), "");
	юТест.ПроверитьРавенство(Результат, "test", "Нет ответа комманды");

	Соединение.Отключиться();

КонецПроцедуры // ТестДолжен_Подключиться()

Процедура ТестДолжен_ПодключитьсяСКлючом() Экспорт

	ВывестиЗаголовокТеста("Тест: Подключение к серверу SSH по ключу");

	Либа = Новый КлиентSSH(СерверАдрес, СерверПорт, ПользовательИмя, ПользовательПароль);
	Либа.УстановитьКлюч(ПутьККлючу, "");

	Соединение = Либа.ПолучитьСоединение();

	Результат = Соединение.ВыполнитьКоманду("echo Привет");   

	// А = Символы.ПС; // Падает
	Результат = СтрЗаменить(Результат, Символ(10), "");
	юТест.ПроверитьРавенство(Результат, "Привет", "Нет ответа комманды");
	Результат = Соединение.ВыполнитьКоманду("echo test");
	Результат = СтрЗаменить(Результат, Символ(10), "");
	юТест.ПроверитьРавенство(Результат, "test", "Нет ответа комманды");

	Соединение.Отключиться();

КонецПроцедуры // ТестДолжен_ПодключитьсяСКлючом()

Процедура ТестДолжен_ПолучитьСодержимоеКаталога() Экспорт

	ВывестиЗаголовокТеста("Тест: Получение содержимого каталога на сервере SSH");

	Либа = Новый КлиентSSH(СерверАдрес, СерверПорт, ПользовательИмя, ПользовательПароль);
    Scp = Либа.ПолучитьScp();

    юТест.ПроверитьРавенство(ТипЗнч(Scp), Тип("СоединениеSCP"), "Не получилось scp"); 
    СодержимоеКаталога = Scp.СодержимоеКаталога(".");

    Scp.Отключиться();

    Сообщить(СтрШаблон("Найден каталог: %1", СодержимоеКаталога.Получить("upload").ПолноеИмя));
    
    юТест.ПроверитьРавенство(СодержимоеКаталога.Получить("upload").Имя,
                                                         "upload",
                                                         "Не удалось получить содержимое каталога"); 

КонецПроцедуры // ТестДолжен_ПолучитьСодержимоеКаталога()

Процедура ТестДолжен_СоздатьКаталогПоПаролю() Экспорт

	ВывестиЗаголовокТеста("Тест: Создание каталога на сервере SSH с указанием пароля");

	ИмяТестовогоКаталога = "testFolder1";

	ПутьККаталогуЛокальный = ОбъединитьПути(ТекущийКаталог, "tools", "openssh", "upload");
	КаталогДляПроверки = Новый Файл(ОбъединитьПути(ПутьККаталогуЛокальный, ИмяТестовогоКаталога));

	Либа = Новый КлиентSSH(СерверАдрес, СерверПорт, ПользовательИмя, ПользовательПароль);
	Scp = Либа.ПолучитьScp();

	юТест.ПроверитьРавенство(ТипЗнч(Scp), Тип("СоединениеSCP"), "Не получилось scp"); 
	Scp.СоздатьКаталог(СтрШаблон("./upload/%1", ИмяТестовогоКаталога));

	Scp.Отключиться();

	юТест.ПроверитьИстину(КаталогДляПроверки.Существует(), "Не удалось создать каталог по паролю");

	УдалитьФайлы(ПутьККаталогуЛокальный, ПолучитьМаскуВсеФайлы());

КонецПроцедуры // ТестДолжен_СоздатьКаталогПоПаролю()

Процедура ТестДолжен_СоздатьКаталогПоКлючу() Экспорт

	ВывестиЗаголовокТеста("Тест: Создание каталога на сервере SSH с указанием ключа");

	ИмяТестовогоКаталога = "testFolder1";

	ПутьККаталогуЛокальный = ОбъединитьПути(ТекущийКаталог, "tools", "openssh", "upload");
	КаталогДляПроверки = Новый Файл(ОбъединитьПути(ПутьККаталогуЛокальный, ИмяТестовогоКаталога));

	Либа = Новый КлиентSSH(СерверАдрес, СерверПорт, ПользовательИмя, "");
	Либа.УстановитьКлюч(ПутьККлючу, "");
	Scp = Либа.ПолучитьScp();

	юТест.ПроверитьРавенство(ТипЗнч(Scp), Тип("СоединениеSCP"), "Не получилось scp"); 

	Scp.СоздатьКаталог(СтрШаблон("./upload/%1", ИмяТестовогоКаталога));

	Scp.Отключиться();

	юТест.ПроверитьИстину(КаталогДляПроверки.Существует(), "Не удалось создать каталог по ключу");

	УдалитьФайлы(ПутьККаталогуЛокальный, ПолучитьМаскуВсеФайлы());

КонецПроцедуры // ТестДолжен_СоздатьКаталогПоКлючу()

Процедура ТестДолжен_ПроверитьСуществованиеКаталогаПоПаролю() Экспорт

	ВывестиЗаголовокТеста("Тест: Проверка существования каталога на сервере SSH с указанием пароля");

	ИмяТестовогоКаталога = "testFolder1";
	ПутьККаталогуЛокальный = ОбъединитьПути(ТекущийКаталог, "tools", "openssh", "upload");

	Либа = Новый КлиентSSH(СерверАдрес, СерверПорт, ПользовательИмя, ПользовательПароль);
	Scp = Либа.ПолучитьScp();

	юТест.ПроверитьРавенство(ТипЗнч(Scp), Тип("СоединениеSCP"), "Не получилось scp"); 

	Scp.СоздатьКаталог(СтрШаблон("./upload/%1", ИмяТестовогоКаталога));
	РезультатПроверки = Scp.Существует(СтрШаблон("./upload/%1", ИмяТестовогоКаталога));

	Scp.Отключиться();

	юТест.ПроверитьИстину(РезультатПроверки, "Ошибка проверки существования каталога по паролю");

	УдалитьФайлы(ПутьККаталогуЛокальный, ПолучитьМаскуВсеФайлы());

КонецПроцедуры // ТестДолжен_ПроверитьСуществованиеКаталогаПоПаролю()

Процедура ТестДолжен_ПроверитьСуществованиеКаталогаПоКлючу() Экспорт

	ВывестиЗаголовокТеста("Тест: Проверка существования каталога на сервере SSH с указанием ключа");

	ИмяТестовогоКаталога = "testFolder1";
	ПутьККаталогуЛокальный = ОбъединитьПути(ТекущийКаталог, "tools", "openssh", "upload");

	Либа = Новый КлиентSSH(СерверАдрес, СерверПорт, ПользовательИмя, "");
	Либа.УстановитьКлюч(ПутьККлючу, "");
	Scp = Либа.ПолучитьScp();

	юТест.ПроверитьРавенство(ТипЗнч(Scp), Тип("СоединениеSCP"), "Не получилось scp"); 
	
	Scp.СоздатьКаталог(СтрШаблон("./upload/%1", ИмяТестовогоКаталога));
	РезультатПроверки = Scp.Существует(СтрШаблон("./upload/%1", ИмяТестовогоКаталога));

	Scp.Отключиться();

	юТест.ПроверитьИстину(РезультатПроверки, "Ошибка проверки существования каталога по ключу");

	УдалитьФайлы(ПутьККаталогуЛокальный, ПолучитьМаскуВсеФайлы());

КонецПроцедуры // ТестДолжен_ПроверитьСуществованиеКаталогаПоКлючу()

Процедура ТестДолжен_УдалитьКаталогПоПаролю() Экспорт

	ВывестиЗаголовокТеста("Тест: Удаление каталога на сервере SSH с указанием пароля");

	ИмяТестовогоКаталога = "testFolder1";

	ПутьККаталогуЛокальный = ОбъединитьПути(ТекущийКаталог, "tools", "openssh", "upload");
	КаталогДляПроверки = Новый Файл(ОбъединитьПути(ПутьККаталогуЛокальный, ИмяТестовогоКаталога));

	Либа = Новый КлиентSSH(СерверАдрес, СерверПорт, ПользовательИмя, ПользовательПароль);
	Scp = Либа.ПолучитьScp();

	юТест.ПроверитьРавенство(ТипЗнч(Scp), Тип("СоединениеSCP"), "Не получилось scp"); 
	Scp.СоздатьКаталог(СтрШаблон("./upload/%1", ИмяТестовогоКаталога));

	юТест.ПроверитьИстину(КаталогДляПроверки.Существует(), "Не удалось создать каталог по паролю");

	Scp.УдалитьКаталог(СтрШаблон("./upload/%1", ИмяТестовогоКаталога));

	юТест.ПроверитьЛожь(КаталогДляПроверки.Существует(), "Не удалось удалить каталог по паролю");

	Scp.Отключиться();

КонецПроцедуры // ТестДолжен_УдалитьКаталогПоПаролю()

Процедура ТестДолжен_УдалитьКаталогПоКлючу() Экспорт

	ВывестиЗаголовокТеста("Тест: Удаление каталога на сервере SSH с указанием ключа");

	ИмяТестовогоКаталога = "testFolder1";

	ПутьККаталогуЛокальный = ОбъединитьПути(ТекущийКаталог, "tools", "openssh", "upload");
	КаталогДляПроверки = Новый Файл(ОбъединитьПути(ПутьККаталогуЛокальный, ИмяТестовогоКаталога));

	Либа = Новый КлиентSSH(СерверАдрес, СерверПорт, ПользовательИмя, "");
	Либа.УстановитьКлюч(ПутьККлючу, "");
	Scp = Либа.ПолучитьScp();

	юТест.ПроверитьРавенство(ТипЗнч(Scp), Тип("СоединениеSCP"), "Не получилось scp"); 
	Scp.СоздатьКаталог(СтрШаблон("./upload/%1", ИмяТестовогоКаталога));

	юТест.ПроверитьИстину(КаталогДляПроверки.Существует(), "Не удалось создать каталог по ключу");

	Scp.УдалитьКаталог(СтрШаблон("./upload/%1", ИмяТестовогоКаталога));

	юТест.ПроверитьЛожь(КаталогДляПроверки.Существует(), "Не удалось удалить каталог по ключу");

	Scp.Отключиться();

КонецПроцедуры // ТестДолжен_УдалитьКаталогПоКлючу()

Процедура ТестДолжен_ОтправитьФайлПоПаролю() Экспорт

	ВывестиЗаголовокТеста("Тест: Отправка файла на сервер SSH с указанием пароля");

	ИмяТестовогоФайла = "testFile1.txt";
	ПутьККаталогу = ОбъединитьПути(ТекущийКаталог, "test", "testFolder1");
	ТестовыйФайл = НовыйТекстовыйФайл(ИмяТестовогоФайла, "Это тестовый файл!", ПутьККаталогу);

	ПутьККаталогуЛокальный = ОбъединитьПути(ТекущийКаталог, "tools", "openssh", "upload");
	ФайлДляПроверки = Новый Файл(ОбъединитьПути(ПутьККаталогуЛокальный, ТестовыйФайл.Имя));

	Либа = Новый КлиентSSH(СерверАдрес, СерверПорт, ПользовательИмя, ПользовательПароль);
	Scp = Либа.ПолучитьScp();

	юТест.ПроверитьРавенство(ТипЗнч(Scp), Тип("СоединениеSCP"), "Не получилось scp"); 
	Scp.ОтправитьФайл(ТестовыйФайл.ПолноеИмя, СтрШаблон("./upload/%1", ТестовыйФайл.Имя));

	Scp.Отключиться();

	юТест.ПроверитьИстину(ФайлДляПроверки.Существует(), "Не удалось отправить файл по паролю");

	УдалитьФайлы(ПутьККаталогуЛокальный, ПолучитьМаскуВсеФайлы());
	УдалитьФайлы(ПутьККаталогу, ПолучитьМаскуВсеФайлы());
	УдалитьФайлы(ПутьККаталогу);

КонецПроцедуры // ТестДолжен_ОтправитьФайлПоПаролю()

Процедура ТестДолжен_ОтправитьФайлПоКлючу() Экспорт

	ВывестиЗаголовокТеста("Тест: Отправка файла на сервер SSH с указанием ключа");

	ИмяТестовогоФайла = "testFile1.txt";
	ПутьККаталогу = ОбъединитьПути(ТекущийКаталог, "test", "testFolder1");
	ТестовыйФайл = НовыйТекстовыйФайл(ИмяТестовогоФайла, "Это тестовый файл!", ПутьККаталогу);

	ПутьККаталогуЛокальный = ОбъединитьПути(ТекущийКаталог, "tools", "openssh", "upload");
	ФайлДляПроверки = Новый Файл(ОбъединитьПути(ПутьККаталогуЛокальный, ТестовыйФайл.Имя));

	Либа = Новый КлиентSSH(СерверАдрес, СерверПорт, ПользовательИмя, "");
	Либа.УстановитьКлюч(ПутьККлючу, "");
	Scp = Либа.ПолучитьScp();

	юТест.ПроверитьРавенство(ТипЗнч(Scp), Тип("СоединениеSCP"), "Не получилось scp"); 
	Scp.ОтправитьФайл(ТестовыйФайл.ПолноеИмя, СтрШаблон("./upload/%1", ТестовыйФайл.Имя));

	Scp.Отключиться();

	юТест.ПроверитьИстину(ФайлДляПроверки.Существует(), "Не удалось отправить файл по ключу");

	УдалитьФайлы(ПутьККаталогуЛокальный, ПолучитьМаскуВсеФайлы());
	УдалитьФайлы(ПутьККаталогу, ПолучитьМаскуВсеФайлы());
	УдалитьФайлы(ПутьККаталогу);

КонецПроцедуры // ТестДолжен_ОтправитьФайлПоКлючу()

Процедура ТестДолжен_ПолучитьФайлПоПаролю() Экспорт

	ВывестиЗаголовокТеста("Тест: Получение файла с сервера SSH с указанием пароля");

	ИмяТестовогоФайла = "testFile1.txt";
	КонтрольныйТекст = "Это тестовый файл!";
	ПутьККаталогуЛокальный = ОбъединитьПути(ТекущийКаталог, "tools", "openssh", "upload");
	ТестовыйФайл = НовыйТекстовыйФайл(ИмяТестовогоФайла, КонтрольныйТекст, ПутьККаталогуЛокальный);

	ПутьККаталогу = ОбъединитьПути(ТекущийКаталог, "test", "testFolder1");
	ФайлДляПроверки = НовыйТекстовыйФайл(ТестовыйФайл.Имя, "", ПутьККаталогу);

	Либа = Новый КлиентSSH(СерверАдрес, СерверПорт, ПользовательИмя, ПользовательПароль);
	Scp = Либа.ПолучитьScp();
	Scp.ПолучитьФайл(СтрШаблон("./upload/%1", ТестовыйФайл.Имя), ФайлДляПроверки.ПолноеИмя);
	Scp.Отключиться();

	ДокументДляПроверки = Новый ТекстовыйДокумент();
	ДокументДляПроверки.Прочитать(ФайлДляПроверки.ПолноеИмя);

	юТест.ПроверитьРавенство(СокрЛП(ДокументДляПроверки.ПолучитьТекст()),
	                         КонтрольныйТекст,
	                         "Не удалось получить файл по паролю");

	УдалитьФайлы(ПутьККаталогуЛокальный, ПолучитьМаскуВсеФайлы());
	УдалитьФайлы(ПутьККаталогу, ПолучитьМаскуВсеФайлы());
	УдалитьФайлы(ПутьККаталогу);

КонецПроцедуры // ТестДолжен_ПолучитьФайлПоПаролю()

Процедура ТестДолжен_ПолучитьФайлПоКлючу() Экспорт

	ВывестиЗаголовокТеста("Тест: Получение файла с сервера SSH с указанием ключа");

	ИмяТестовогоФайла = "testFile1.txt";
	КонтрольныйТекст = "Это тестовый файл!";
	ПутьККаталогуЛокальный = ОбъединитьПути(ТекущийКаталог, "tools", "openssh", "upload");
	ТестовыйФайл = НовыйТекстовыйФайл(ИмяТестовогоФайла, КонтрольныйТекст, ПутьККаталогуЛокальный);

	ПутьККаталогу = ОбъединитьПути(ТекущийКаталог, "test", "testFolder1");
	ФайлДляПроверки = НовыйТекстовыйФайл(ТестовыйФайл.Имя, "", ПутьККаталогу);

	Либа = Новый КлиентSSH(СерверАдрес, СерверПорт, ПользовательИмя, "");
	Либа.УстановитьКлюч(ПутьККлючу, "");
	Scp = Либа.ПолучитьScp();
	Scp.ПолучитьФайл(СтрШаблон("./upload/%1", ТестовыйФайл.Имя), ФайлДляПроверки.ПолноеИмя);
	Scp.Отключиться();

	ДокументДляПроверки = Новый ТекстовыйДокумент();
	ДокументДляПроверки.Прочитать(ФайлДляПроверки.ПолноеИмя);

	юТест.ПроверитьРавенство(СокрЛП(ДокументДляПроверки.ПолучитьТекст()),
	                         КонтрольныйТекст,
	                         "Не удалось получить файл по ключу");

	УдалитьФайлы(ПутьККаталогуЛокальный, ПолучитьМаскуВсеФайлы());
	УдалитьФайлы(ПутьККаталогу, ПолучитьМаскуВсеФайлы());
	УдалитьФайлы(ПутьККаталогу);

КонецПроцедуры // ТестДолжен_ПолучитьФайлПоКлючу()

Процедура ТестДолжен_УдалитьФайлПоПаролю() Экспорт

	ВывестиЗаголовокТеста("Тест: Удаление файла с сервера SSH с указанием пароля");

	ИмяТестовогоФайла = "testFile1.txt";
	ПутьККаталогуЛокальный = ОбъединитьПути(ТекущийКаталог, "tools", "openssh", "upload");
	ТестовыйФайл = НовыйТекстовыйФайл(ИмяТестовогоФайла, "Это тестовый файл!", ПутьККаталогуЛокальный);

	Либа = Новый КлиентSSH(СерверАдрес, СерверПорт, ПользовательИмя, ПользовательПароль);
	Scp = Либа.ПолучитьScp();

	юТест.ПроверитьРавенство(ТипЗнч(Scp), Тип("СоединениеSCP"), "Не получилось scp"); 

	РезультатПроверки = Scp.Существует(СтрШаблон("./upload/%1", ТестовыйФайл.Имя));

	юТест.ПроверитьИстину(РезультатПроверки, "Не удалось проверить существование файла по паролю");

	Scp.УдалитьФайл(СтрШаблон("./upload/%1", ТестовыйФайл.Имя));

	юТест.ПроверитьЛожь(ТестовыйФайл.Существует(), "Не удалось удалить файл по паролю");

	Scp.Отключиться();

	УдалитьФайлы(ПутьККаталогуЛокальный, ПолучитьМаскуВсеФайлы());

КонецПроцедуры // ТестДолжен_УдалитьФайлПоПаролю()

Процедура ТестДолжен_УдалитьФайлПоКлючу() Экспорт

	ВывестиЗаголовокТеста("Тест: Удаление файла с сервера SSH с указанием ключа");

	ИмяТестовогоФайла = "testFile1.txt";
	ПутьККаталогуЛокальный = ОбъединитьПути(ТекущийКаталог, "tools", "openssh", "upload");
	ТестовыйФайл = НовыйТекстовыйФайл(ИмяТестовогоФайла, "Это тестовый файл!", ПутьККаталогуЛокальный);

	Либа = Новый КлиентSSH(СерверАдрес, СерверПорт, ПользовательИмя, "");
	Либа.УстановитьКлюч(ПутьККлючу, "");
	Scp = Либа.ПолучитьScp();

	юТест.ПроверитьРавенство(ТипЗнч(Scp), Тип("СоединениеSCP"), "Не получилось scp"); 

	РезультатПроверки = Scp.Существует(СтрШаблон("./upload/%1", ТестовыйФайл.Имя));

	юТест.ПроверитьИстину(РезультатПроверки, "Не удалось проверить существование файла по ключу");

	Scp.УдалитьФайл(СтрШаблон("./upload/%1", ТестовыйФайл.Имя));

	юТест.ПроверитьЛожь(ТестовыйФайл.Существует(), "Не удалось удалить файл по ключу");

	Scp.Отключиться();

	УдалитьФайлы(ПутьККаталогуЛокальный, ПолучитьМаскуВсеФайлы());

КонецПроцедуры // ТестДолжен_УдалитьФайлПоКлючу()

Процедура ТестДолжен_Упасть() Экспорт

	ВывестиЗаголовокТеста("Тест: Должен упасть");

	ВызватьИсключение "Этот тест упал, как и должен был!";

КонецПроцедуры // ТестДолжен_Упасть()

Функция НовыйТекстовыйФайл(ИмяФайла, Знач Содержимое = "", Знач ПутьККаталогу = "")

	Текст = Новый ТекстовыйДокумент();
	Если ЗначениеЗаполнено(Содержимое) Тогда
		Текст.УстановитьТекст(Содержимое);
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ПутьККаталогу) Тогда
		ПутьККаталогу = ПолучитьИмяВременногоФайла();
	КонецЕсли;

	ПутьКФайлу = ОбъединитьПути(ПутьККаталогу, ИмяФайла);

	Каталог = Новый Файл(ПутьККаталогу);
	Если НЕ (Каталог.Существует() И Каталог.ЭтоКаталог()) Тогда
		СоздатьКаталог(ПутьККаталогу);
	КонецЕсли;

	Текст.Записать(ПутьКФайлу);

	Возврат Новый Файл(ПутьКФайлу);

КонецФункции // НовыйТекстовыйФайл()

Процедура ВывестиЗаголовокТеста(Знач Заголовок = "")

	Если СчетчикТестов = Неопределено Тогда
		СчетчикТестов = 1;
	КонецЕсли;

	Сообщить(СтрШаблон("%1. %2", СчетчикТестов, СтрЗаменить(Заголовок, Символы.ПС, " ")));

	СчетчикТестов = СчетчикТестов + 1;

КонецПроцедуры // ВывестиЗаголовокТеста()
